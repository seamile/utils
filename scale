#!/usr/bin/env python

from argparse import ArgumentParser
from imghdr import what
from os import remove
from pathlib import Path
from PIL import Image
from shutil import copy
from subprocess import getstatusoutput
from typing import Generator, Tuple

Size = Tuple[int, int]


def parse_bytes(size: str) -> int:
    file_size = size.lower()
    try:
        v = float(file_size)
    except ValueError:
        units = {'b': 1, 'k': 1024, 'm': 1048576, 'g': 1073741824}
        u = file_size[-1]
        v = float(file_size[:-1]) * units[u]
    return round(v)


def find_images(img_dir: Path) -> Generator[Path, None, None]:
    for item in img_dir.iterdir():
        if item.name.startswith('.'):
            continue
        if item.is_file() and what(item) in ['jpeg', 'png', 'bmp', 'webp']:
            yield item


def get_new_size(size: Size, h_size: int, v_size: int, max_size: int) -> Size:
    width, height = size
    if width > height:
        # 横版图 h_size 为准
        if width < h_size:
            new_height = round(h_size / width * height)
            return (h_size, new_height)

        elif width > max_size:
            new_height = round(max_size / width * height)
            return (max_size, new_height)

        else:
            return (width, height)

    else:
        # 竖版图以 v_size 为准
        if height < v_size:
            new_width = round(v_size / height * width)
            return (new_width, v_size)

        elif height > max_size:
            new_width = round(max_size / height * width)
            return (new_width, max_size)

        else:
            return (width, height)


def zoom_in(img_path: Path, cur_size: Size, new_size: Size, itype: str, noise: str) -> Size:
    '''放大'''
    if itype == 'A':
        itype = 'a' if min(cur_size) < 1024 else 'p'
    cmd = f'waifu2x -t {itype} -s 2 -n {noise} -i {img_path} -o {img_path}'

    while cur_size < new_size:
        _size = (cur_size[0] * 2, cur_size[1] * 2)
        print(f'     zoom in: {_size[0]:4d} x {_size[1]:4d}', end='\r')
        stat, msg = getstatusoutput(cmd)
        if stat == 0:
            cur_size = _size
        else:
            msg = msg.replace('\n', '\n              ')
            print(f'\n       error: {msg}')
            break
    return cur_size


def zoom(src_path: Path, h_size: int, v_size: int, max_size: int,
         cover=False, itype='p', noise='3'):
    '''缩放图片'''
    # 文件修改标识
    modified = False

    # 复制文件
    basename = src_path.name.rsplit('.')[0]
    cp_path = src_path.parent.joinpath(f'.{basename}.png')  # 创建隐藏文件进行操作
    copy(src_path, cp_path)

    img = Image.open(cp_path)
    cur_size = img.size  # 初始大小
    print(f'    original: {cur_size[0]} x {cur_size[1]}')
    new_size = get_new_size(cur_size, h_size, v_size, max_size)  # 目标大小

    # 检查是否需要放大
    if cur_size < new_size:
        # 执行放大操作
        cur_size = zoom_in(cp_path, cur_size, new_size, itype, noise)
        modified = True

    # 检查是否超过目标尺寸
    if cur_size > new_size:
        print(f'    zoom out: {new_size[0]} x {new_size[1]}', end='\r')
        img = Image.open(cp_path).resize(new_size)
        img.save(cp_path)
        modified = True

    # 检查文件大小
    max_bytes = parse_bytes(args.bytes)
    if cp_path.stat().st_size > max_bytes:
        print('    reducing file size', end='\r')
        # 保存为 jpg 文件
        temp_path = cp_path.parent.joinpath(f'.{basename}.jpg')
        Image.open(cp_path).convert('RGB').save(temp_path, optimize=True, quality=95)
        # 删除大文件
        remove(cp_path)
        cp_path = temp_path
        modified = True

    fin_size = img.size
    print(f'     finally: {fin_size[0]} x {fin_size[1]}')

    # 输出到目标位置
    suffix = cp_path.suffix if modified else src_path.suffix

    if cover:
        if not modified:
            remove(cp_path)
            print(f'      keeped: {src_path}\n')
            return
        else:
            dst_path = cp_path.parent.joinpath(f'{basename}{suffix}')
            if src_path.absolute() != dst_path.absolute():
                remove(src_path)
    else:
        # 创建输出文件夹
        output_dir = src_path.parent.joinpath('output')
        output_dir.mkdir(mode=0o755, exist_ok=True)
        # 移动(重命名)处理后的文件
        dst_path = output_dir.joinpath(f'{basename}{suffix}')

    print(f'      output: {dst_path}\n')
    cp_path.rename(dst_path)


def main(args):
    n = 1
    for path in args.sources:
        _path = Path(path)
        if _path.is_dir():
            for img_path in find_images(_path):
                print(f'{n:2d}. processing {img_path.name}')
                zoom(img_path, args.h_size, args.v_size, args.max_size,
                     args.cover, args.itype, args.noise)
                n += 1
        else:
            print(f'{n:2d}. processing {_path.name}')
            zoom(_path, args.h_size, args.v_size, args.max_size,
                 args.cover, args.itype, args.noise)
            n += 1


if __name__ == '__main__':
    parser = ArgumentParser(prog='scale')

    # 删除默认的 -h 参数
    helper = parser._option_string_actions.get('-h')
    if helper and helper.dest == 'help':
        helper.option_strings.remove('-h')  # type: ignore
        parser._option_string_actions.pop('-h')

    # 定义命令行参数
    parser.add_argument('-h', dest='h_size', type=int, default=5120, help='横版图的标准宽度 (默认值: %(default)s像素)')
    parser.add_argument('-v', dest='v_size', type=int, default=4096, help='竖版图的标准高度 (默认值: %(default)s像素)')
    parser.add_argument('-m', dest='max_size', type=int, default=8192, help='长边最大像素值 (默认值: %(default)s像素)')
    parser.add_argument('-b', dest='bytes', type=str, default='5m', help='图像的最大体积 (默认值: %(default)s)')
    parser.add_argument('-c', dest='cover', action='store_true', help='是否覆盖原图 (默认值: %(default)s)')
    parser.add_argument('-t', dest='itype', choices='apA', default='A',
                        help='图像类型：a (anime) / p (photo) / A (auto), (默认值: %(default)s)')
    parser.add_argument('-n', dest='noise', choices='01234', default='3',
                        help='降噪级别: 0-4 (默认值: %(default)s)')
    parser.add_argument(dest='sources', nargs='*', default=('./',), help='图片文件或文件夹')

    args = parser.parse_args()
    main(args)
